ThoughtWall 
Brandon Hills ('20) and Allison Lee ('20) 
CS50 Fall 2016 Final Project
======================================================

GENERAL IMPLEMENTATION OVERVIEW
==================================
This project required us to use JavaScript, CSS, HTML, SQLite and Python. It used Allison Lee's C$50 Finance implementation as a start-
ing framework due to the similarity between its user interface and the one we hoped to create. Furthermore, C$50 Finance's fundamen-
tal functionality of database manipulation served as a jumping board for our front end work. We then modified our user interface 
to reach our project's aesthetic goals in order to offer a superior user experiece. Another key feature of this project is the 
incorporation of HTML5 Canvas to increase the aesthetic quality of our ThoughtWalls. This required us to learn a very new element 
of HTML and to explore object-oriented programming through JavaScript.

SPECIFIC ELEMENT DESIGNS 
===============================
A) MODERNIZR.JS, SIMPLEDISKPARTICLE.JS, SIMPLESQUAREPARTICLE.JS:
These were downloaded from Rectangle World and modified to serve our purposes. Modernizr.js was more or less left alone. However,
for the other two JavaScript files, we had to add significant functionality. In Rectangle World, the objects generated by the .js 
files are only moveable shapes with no text. We needed to change files so that the shapes' sizes depended on the length of the post 
displayed in it and actually diplay the text of the post. 

B) STYLES.CSS, STYLES2.CSS: 
We modeled the styles.css file from C$50 Finance's distribution code. We chose to have two .css files because we wanted to have two
distinct backgrounds for the HTML pages in our website; one with a background of Annenberg, and one with a solid crimson background.
styles.css contains our crimson background styling, while styles2.css contains our Annenberg background styling. Furthermore, 
styles2.css has a block of code called ".styled-select" used to format some of our HTML dropdown menus (see EXTERNAL SOURCES C). 

C) TEMPLATES: 
We chose to create 10 templates in total for our website. 

I. layout.html: 
This was one of our first html pages, adapted from the layout.html in C$50 Finance. It's where we make a navigationbar and such. On 
line 12, it has a snippet of code reading "{% block css %}{% endblock %}". This was actually something we created later in the midst 
of designing styles.css and styles2.css. We realized that if we wanted to use two different .css files, there had to be a way to 
refer to them appropriately depending on what background we wanted for a specific HTML page. Originally, we created a copy of 
layout.html and had the other HTML pages extend either layout.html or layout_front.html (the copy) depending on which background we 
wanted. But this was very redundant (the two layout HTML pages were identical except which .css file they referred to) so to 
eliminate the redundancy, we added the aforementioned code on line 12. Then, in the other HTML pages, we define what exactly that 
{% block css %} is; for example, in login.html, lines 7-9 indicate that layout.html should use styles2.css.

III. changeConcentration.html, changeHouse.html: 
These two pages are similar in implementation in that they require a dynamic generation of a second drop-down menu based on a 
selection made by the user in the first drop-down menu. We chose to implement this because when we originally just had one drop-down
menu, it was inconvenient; there are 49 concentrations, and scrolling through all of them seemed like a pain. Similarly, there are
a lot of dorms. By utilizing two drop-downs, selections are made slightly easier. To do this, we used two JavaScript functions; one
to choose what to dynamically generate, and another to actually generate a list of the Option objects. The functions in the two
HTML pages are pretty similar, with the contents of the lists differing to contain the relevant list. 
For aesthetic purposes, we used the "selectpicker" class from bootstrap-select to make our drop-downs prettier and contain jQuery
icons. 

IV. register.html: 
This HTML page needed the same dynamic drop-down creation functions implemented in changeConcentration.html and changeHouse.html. 
Other than that, the rest of the HTML page is pretty basic. 

V. index.html: 
The basis of our index.html page was the html from Rectangle World. However, we had to significantly modify some parts of the code 
to be able to make the shapes display text and pull off other functionalities. For example: 
    - We had to take the variables containing the text we needed to display and jsonify it (lines 107-111)
    - We had to make sure that the shapes we were generating were an appropriate size to contain the post's text (line 114)
    - While the original HTML had the shapes completely randomly placed on the Canvas, we found this to be pretty unsuccessful in 
    displaying our posts aesthetically. Thus, we modified the x- and y- coordinates of our shapes so that the x-coordinate would 
    still be random, but the y-coordinates were equally spaced so that shapes would appear every 200 pixels (lines 117-120) 
    - We had to alter the call to the .js files that created the shapes to pass over the relevant information for each post (title,
    text, user's name, email address, length of the post). 

VI. changePassword.html, login.html, post.html, removePost.html, settings.html: 
Pretty basic HTML page; not much to explain here. 

D) APPLICATION.PY: 

Most of our functions in application.py involve database manipulation, which we were quite familiar with and implemented with few
difficulties due to our previous experience with C$50 Finance. However, we made several major design decisions that are described 
below: 

The most notable design decision that we had to make in application.py is when displaying the ThoughtWall itself, or any of the
specific tohughtwalls. At first, we had four different routes, one for each wall. But the coding for each of these routes was almost
identical, since the walls each accomplished roughly the same thing. So we decided that in order to reduce redundancy in our coding,
we needed to create an external function. We created partialWallDisplay for the specific walls, and displayWall for the general wall. 
For the specific walls, partialWallDisplay would take one argument vector that would tell the SQL query which specification to use
when filtering through the database. PartialWallDisplay would then query for all the posts relevent to the user's request, and then
input those into displayWall, which prepares the posts to be transfered to the JavaScript HTML file. This design suited our needs
because this would cut out the redundancy that we found earlier, as well as allow for a little modifications on our part (e.g. the
general wall skips over the "partialWallFunction" entirely, since it doesn't take any specifications.)

Another noteable design decision that we made in application.py was our use of the "session" flask function. We used session in a 
similar way as was intended in CS50 Finance. But we also used "session" in a global variable storing capacity, and stored user info
like session["email"] and session["name"] because this enabled us to access important user info when the user was logged in, rather
than having to run a SQL query every time we needed to reference the user's name.

In application.py, specifically in the "register" route, we restrict the user from using any login info other than their Harvard
college emails (sorry Yale). But before we save their login info into the SQL database, we made sure to strip their email address 
of the @college.harvard.edu ending because we didn't want such a long string saved into the database. Another benefit of this 
decision is that it enables users to login with two possible inputs: their full college email (with the @college ending), or a
shortened version without the @college ending. We decided this was ideal for user experience because it can get monotonous to enter
such an elongated email. But this also saves the user from creating a separate username that can be easily forgotten.


E) THOUGHTWALL.DB:
For our SQL database, we first created a users database, so that users could create an account. We gathered only the most necessary 
information, such as user's login and password (the password was hashed for security reasons), the user's name, dorm, class year, 
and concentration. The latter three specifications would later be necessary so that the program can display posts that only user's 
with the same house/year/concentration specifics can see. 

For our second table, we called it "posts", as it contains all the posts that the users created. Through the implementation 
process, we originally only had two rows - title and text - that we displayed onto a static html page (this was before we knew how 
to implement Canvas). 
We now have a field called "id" which is autoincremented and is a primary key. This enables us to display the posts in
reverse chronological order, because we save the posts respective of the order in which they were published. We also have an email
and a name field, so that the posts can be connected back to their author. We post the email address of the author so that users 
can connect with one another outside of the program, in real life. In the table "posts", we also store the title and body texts. To 
keep track of what wall a post belongs to, we have a "wall" and a "specifics" field. The "wall" field stores what wall the post be-
longs to (as the name suggests); the "specifics" field is NULL if the wall the post belongs to is "general". If it isn't, it's im-
portant to know the user's specific year/house/concentration because when other users try to access that wall, we want posts to only
show up if they share the same year/house/concentration. For example, if user A lives in Hurlbut and posts on their house wall. User
B, who lives in Pennypacker, would be able to see user A's post on their house wall if the db query only called to check the that 
the "wall" field was "house". 

EXTERNAL SOURCES
==================
A) We accessed Rectangle World's implementation of JavaScript programming in order to find the format we desired for displaying our 
posts dynamically on Canvas. Rectangle World's smooth dragging open-sourceware met our needs perfectly - Here is a link to their 
site http://rectangleworld.com/blog/archives/129 - we then had to study and understand their source code in order to make the 
changes relevant for our project. Rectangle World used the Modernizr library, so we also relied on it. It can be found in our 
static folder in finalproject. 

B) The login_required function from the distribution code for C$50 Finance was used in our application.py, as it was necessary for 
us to verify that users were logged in to access certain web pages. 

C) In order to make our dropdowns more aesthetically pleasing, we used bootstrap-select, a jQuery plugin. We also had some HTML 
dropdowns that we wanted to improve, and we did that through the .styled-select code in styles2.css. The code was adapted from 
http://bavotasan.com/2011/style-select-box-using-only-css/. 

D) Our textWrapper function was inspired by an online tutorial we found: 
http://www.html5canvastutorials.com/tutorials/html5-canvas-wrap-text-tutorial/. We then altered it to serve our purposes. 

E) We referred to various StackOverflow threads to figure out various bugs or usages throughout the process of implementing this. 

ACKNOWLEDGEMENTS
==================
We'd like to thank all the CS50 TF's who helped us with this implementation through the Hackathon, but we are especially grateful to
Thomas Jiang and Abby Lyons. Thomas was the one who suggested using Canvas as the way to display our posts more aesthetically and 
showed us the basic ropes. Abby was willing to meet with us on her own time on a busy Reading Period night to help us improve our 
design. 